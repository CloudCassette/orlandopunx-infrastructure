name: 🎸 Orlando Events Sync + Flyer Delivery

on:
  schedule:
    - cron: '0 9,15,21 * * *'  # Run 3 times daily: 9am, 3pm, 9pm EST
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-and-deliver:
    runs-on: self-hosted
    name: 🎵 Sync Events + Deliver Flyers to Web Server
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Setup Python Environment
      run: |
        cd scripts/event-sync
        
        echo "🐍 Setting up Python environment..."
        
        # Create virtual environment if it doesn't exist
        if [ ! -d "venv" ]; then
          echo "Creating virtual environment..."
          python3 -m venv venv
        fi
        
        # Activate virtual environment
        source venv/bin/activate
        
        # Install/update dependencies
        echo "Installing dependencies..."
        pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "✅ Python environment ready"
      
    - name: 🎸 Orlando Events Sync (Complete Pipeline)
      env:
        GANCIO_EMAIL: ${{ secrets.GANCIO_EMAIL }}
        GANCIO_PASSWORD: ${{ secrets.GANCIO_PASSWORD }}
        GANCIO_URL: http://localhost:13120
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        cd scripts/event-sync
        
        echo "🎸 Starting GitHub Actions event sync..."
        echo "Using the same working script as cron job"
        
        # Activate virtual environment
        source venv/bin/activate
        
        # Verify environment
        echo "Python version: $(python --version)"
        echo "GANCIO_EMAIL set: ${GANCIO_EMAIL:+YES}" 
        echo "GANCIO_PASSWORD set: ${GANCIO_PASSWORD:+YES}"
        
        # Run the working automated sync
        python3 automated_sync_working.py
        
        echo "✅ Orlando events sync completed via GitHub Actions"

    - name: 🖼️ Deliver Flyers to Web Server
      run: |
        cd scripts/event-sync
        
        echo "🖼️ Delivering new flyers to web server..."
        
        # Define source (GitHub Actions workspace) and target (local serving directory)
        SOURCE_DIR="/home/cloudcassette/actions-runner/_work/orlandopunx-infrastructure/orlandopunx-infrastructure/scripts/event-sync/flyers"
        TARGET_DIR="/home/cloudcassette/orlandopunx-infrastructure/scripts/event-sync/flyers"
        
        echo "Source: $SOURCE_DIR"
        echo "Target: $TARGET_DIR"
        
        # Count flyers before sync
        source_count=$(find "$SOURCE_DIR" -name "*.jpg" -o -name "*.png" -o -name "*.gif" 2>/dev/null | wc -l)
        target_count_before=$(find "$TARGET_DIR" -name "*.jpg" -o -name "*.png" -o -name "*.gif" 2>/dev/null | wc -l)
        
        echo "📊 Before delivery: Source=$source_count, Target=$target_count_before flyers"
        
        # Ensure target directory exists
        mkdir -p "$TARGET_DIR"
        
        # Copy new flyers from runner workspace to serving directory
        if [ -d "$SOURCE_DIR" ] && [ "$(ls -A $SOURCE_DIR)" ]; then
          echo "📁 Copying flyers from GitHub Actions workspace to web server..."
          
          # Use rsync for efficient copying (only copy newer files)
          rsync -av --update "$SOURCE_DIR/" "$TARGET_DIR/"
          
          # Set proper permissions
          chmod 644 "$TARGET_DIR"/*.{jpg,png,gif} 2>/dev/null || true
          
          echo "✅ Flyer delivery completed"
        else
          echo "⚠️ No flyers found in source directory"
        fi
        
        # Count flyers after sync
        target_count_after=$(find "$TARGET_DIR" -name "*.jpg" -o -name "*.png" -o -name "*.gif" 2>/dev/null | wc -l)
        new_flyers=$((target_count_after - target_count_before))
        
        echo "📊 After delivery: Target=$target_count_after flyers (+$new_flyers new)"
        
        # Restart flyer web server to pick up new files (if needed)
        echo "🔄 Refreshing flyer gallery service..."
        if pgrep -f "serve_flyers.py" > /dev/null; then
          echo "✅ Flyer web server is running and will serve new files automatically"
        else
          echo "⚠️ Flyer web server not running"
        fi
        
    - name: 📁 Archive Results & Verify Delivery
      if: always()
      run: |
        cd scripts/event-sync
        
        echo ""
        echo "📊 GitHub Actions Sync Results:"
        echo "==============================="
        if [ -f sync_summary.txt ]; then
          cat sync_summary.txt
        fi
        
        echo ""
        echo "🖼️ Flyer Delivery Summary:"
        echo "=========================="
        local_flyers=$(find /home/cloudcassette/orlandopunx-infrastructure/scripts/event-sync/flyers -name "*.jpg" -o -name "*.png" -o -name "*.gif" 2>/dev/null | wc -l)
        local_size=$(du -sh /home/cloudcassette/orlandopunx-infrastructure/scripts/event-sync/flyers 2>/dev/null | cut -f1)
        
        echo "Total flyers available on web server: $local_flyers"
        echo "Total size: $local_size"
        echo "Web server URL: http://192.168.86.4:8081"
        echo "API endpoint: http://192.168.86.4:8081/api/flyers"
        
        # Test web server accessibility
        echo ""
        echo "🌐 Web Server Test:"
        if curl -s --connect-timeout 5 http://192.168.86.4:8081/api/flyers > /dev/null; then
          echo "✅ Web server is accessible and serving flyers"
        else
          echo "❌ Web server accessibility test failed"
        fi
        
        # Archive results
        mkdir -p ../../backups/orlando-events
        cp willspub_events.json ../../backups/orlando-events/willspub_$(date +%Y%m%d_%H%M).json 2>/dev/null || true
        
        if [ -d flyers ] && [ "$(ls -A flyers)" ]; then
          mkdir -p ../../backups/orlando-flyers  
          cp -r flyers ../../backups/orlando-flyers/flyers_$(date +%Y%m%d_%H%M)/ 2>/dev/null || true
        fi
        
        echo "✅ Enhanced GitHub Actions automation pipeline completed!"
